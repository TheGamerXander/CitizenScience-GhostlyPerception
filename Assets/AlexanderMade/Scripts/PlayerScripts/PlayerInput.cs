//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/AlexanderMade/Scripts/PlayerScripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""b9e703aa-8eb8-4856-aa18-54c646a1c415"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a3632697-3339-41f0-9645-0766a0301df4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchToCanon"",
                    ""type"": ""Button"",
                    ""id"": ""396295b4-c855-4b57-8409-e27b766072d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToDetector"",
                    ""type"": ""Button"",
                    ""id"": ""2bde156e-7d09-4131-b7be-60808e548d08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchToMine"",
                    ""type"": ""Button"",
                    ""id"": ""6a3192db-3cf7-4d0e-b7e1-6311a4d65087"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCurrentItem"",
                    ""type"": ""Button"",
                    ""id"": ""82dc6dec-5a8a-4650-b975-56fb995fa17d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseBeam"",
                    ""type"": ""Button"",
                    ""id"": ""238b88ff-e91a-48e3-8859-a2fc92056c2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b1760799-452d-4d13-84ae-27976445d927"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fb97c661-c15a-4571-a4a7-57402c25dd47"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""33fd94c2-5432-4337-98ea-b15a31dd21c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cc5f19b6-40bc-487f-b7be-5da833e73711"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""21e9a976-eb9d-4fa2-8928-d1ddb0c5ce00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""376cac70-ded0-4f67-bb3c-cdba4d20de05"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToCanon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""333f8c63-a516-4afb-ae13-e776a528347a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToDetector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2664ea8f-a192-4d9c-b25f-5e97580e512b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchToMine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6998de-ae6b-4c0a-b22a-d20ba80eb928"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCurrentItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7491944-58ed-4c08-a77b-f566720a9d85"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseBeam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Movement = m_CharacterControls.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControls_SwitchToCanon = m_CharacterControls.FindAction("SwitchToCanon", throwIfNotFound: true);
        m_CharacterControls_SwitchToDetector = m_CharacterControls.FindAction("SwitchToDetector", throwIfNotFound: true);
        m_CharacterControls_SwitchToMine = m_CharacterControls.FindAction("SwitchToMine", throwIfNotFound: true);
        m_CharacterControls_UseCurrentItem = m_CharacterControls.FindAction("UseCurrentItem", throwIfNotFound: true);
        m_CharacterControls_UseBeam = m_CharacterControls.FindAction("UseBeam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
    private readonly InputAction m_CharacterControls_Movement;
    private readonly InputAction m_CharacterControls_SwitchToCanon;
    private readonly InputAction m_CharacterControls_SwitchToDetector;
    private readonly InputAction m_CharacterControls_SwitchToMine;
    private readonly InputAction m_CharacterControls_UseCurrentItem;
    private readonly InputAction m_CharacterControls_UseBeam;
    public struct CharacterControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControls_Movement;
        public InputAction @SwitchToCanon => m_Wrapper.m_CharacterControls_SwitchToCanon;
        public InputAction @SwitchToDetector => m_Wrapper.m_CharacterControls_SwitchToDetector;
        public InputAction @SwitchToMine => m_Wrapper.m_CharacterControls_SwitchToMine;
        public InputAction @UseCurrentItem => m_Wrapper.m_CharacterControls_UseCurrentItem;
        public InputAction @UseBeam => m_Wrapper.m_CharacterControls_UseBeam;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwitchToCanon.started += instance.OnSwitchToCanon;
            @SwitchToCanon.performed += instance.OnSwitchToCanon;
            @SwitchToCanon.canceled += instance.OnSwitchToCanon;
            @SwitchToDetector.started += instance.OnSwitchToDetector;
            @SwitchToDetector.performed += instance.OnSwitchToDetector;
            @SwitchToDetector.canceled += instance.OnSwitchToDetector;
            @SwitchToMine.started += instance.OnSwitchToMine;
            @SwitchToMine.performed += instance.OnSwitchToMine;
            @SwitchToMine.canceled += instance.OnSwitchToMine;
            @UseCurrentItem.started += instance.OnUseCurrentItem;
            @UseCurrentItem.performed += instance.OnUseCurrentItem;
            @UseCurrentItem.canceled += instance.OnUseCurrentItem;
            @UseBeam.started += instance.OnUseBeam;
            @UseBeam.performed += instance.OnUseBeam;
            @UseBeam.canceled += instance.OnUseBeam;
        }

        private void UnregisterCallbacks(ICharacterControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwitchToCanon.started -= instance.OnSwitchToCanon;
            @SwitchToCanon.performed -= instance.OnSwitchToCanon;
            @SwitchToCanon.canceled -= instance.OnSwitchToCanon;
            @SwitchToDetector.started -= instance.OnSwitchToDetector;
            @SwitchToDetector.performed -= instance.OnSwitchToDetector;
            @SwitchToDetector.canceled -= instance.OnSwitchToDetector;
            @SwitchToMine.started -= instance.OnSwitchToMine;
            @SwitchToMine.performed -= instance.OnSwitchToMine;
            @SwitchToMine.canceled -= instance.OnSwitchToMine;
            @UseCurrentItem.started -= instance.OnUseCurrentItem;
            @UseCurrentItem.performed -= instance.OnUseCurrentItem;
            @UseCurrentItem.canceled -= instance.OnUseCurrentItem;
            @UseBeam.started -= instance.OnUseBeam;
            @UseBeam.performed -= instance.OnUseBeam;
            @UseBeam.canceled -= instance.OnUseBeam;
        }

        public void RemoveCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);
    public interface ICharacterControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwitchToCanon(InputAction.CallbackContext context);
        void OnSwitchToDetector(InputAction.CallbackContext context);
        void OnSwitchToMine(InputAction.CallbackContext context);
        void OnUseCurrentItem(InputAction.CallbackContext context);
        void OnUseBeam(InputAction.CallbackContext context);
    }
}
